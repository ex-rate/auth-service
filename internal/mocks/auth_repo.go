// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	schema "github.com/ex-rate/auth-service/internal/schemas"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockauthRepo is a mock of authRepo interface.
type MockauthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockauthRepoMockRecorder
}

// MockauthRepoMockRecorder is the mock recorder for MockauthRepo.
type MockauthRepoMockRecorder struct {
	mock *MockauthRepo
}

// NewMockauthRepo creates a new mock instance.
func NewMockauthRepo(ctrl *gomock.Controller) *MockauthRepo {
	mock := &MockauthRepo{ctrl: ctrl}
	mock.recorder = &MockauthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthRepo) EXPECT() *MockauthRepoMockRecorder {
	return m.recorder
}

// GetHashPassword mocks base method.
func (m *MockauthRepo) GetHashPassword(ctx context.Context, auth schema.AuthWithPassword) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashPassword", ctx, auth)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashPassword indicates an expected call of GetHashPassword.
func (mr *MockauthRepoMockRecorder) GetHashPassword(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashPassword", reflect.TypeOf((*MockauthRepo)(nil).GetHashPassword), ctx, auth)
}

// GetUserID mocks base method.
func (m *MockauthRepo) GetUserID(ctx context.Context, username string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, username)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockauthRepoMockRecorder) GetUserID(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockauthRepo)(nil).GetUserID), ctx, username)
}
